%extra_argument { SmartTpl::TokenProcessor *parent }
%token_type { SmartTpl::Token* }
%token_prefix TOKEN_
%name SmartTplParse

%type   statement        {SmartTpl::Statement*}
%type   statements       {SmartTpl::Statements*}
%type   ifStatement      {SmartTpl::IfStatement*}
%type   elseStatement    {SmartTpl::Statements*}
%type   foreachStatement {SmartTpl::ForEachStatement*}
%type   assignStatement  {SmartTpl::AssignStatement*}
%type   expr             {SmartTpl::Expression*}
%type   boolexpr         {SmartTpl::Expression*}
%type   outexpr          {SmartTpl::Expression*}
%type   literal          {SmartTpl::Literal*}
%type   variable         {SmartTpl::Variable*}
%type   filter           {SmartTpl::Filter*}
%type   parameters       {SmartTpl::Parameters*}
%type   modifiers        {SmartTpl::Modifiers*}
%type   modifier         {SmartTpl::ModifierExpression*}

%default_destructor { if ($$) delete $$; }
%token_destructor { if ($$) delete $$; }

%left OR.
%left AND.
%left EQ NE.
%left LT LE GT GE.
%left PLUS MINUS.
%left MULTIPLY DIVIDE MOD.
%right EXP NOT.
%left COLON.
%left PIPE.
%left DOT LBRACK RBRACK.

%include 
{
    #include "includes.h"
    #include <iostream>
    #include <assert.h>
    #define YYSTACKDEPTH 1000
}

%parse_accept
{
    // code that is executed when the file was accepted
}

%parse_failure
{
    parent->parseFailure();
}

%syntax_error 
{
    parent->syntaxError();
}

%stack_overflow
{
    parent->stackOverflow();
}

start               ::= statements(A) .                                         { parent->add(A); }
statements(A)       ::= statements(B) statement(C) .                            { A = B; A->add(C); }
statements(A)       ::= statement(B) .                                          { A = new SmartTpl::Statements(B); }
statement(A)        ::= ifStatement(B) .                                        { A = B; }
statement(A)        ::= RAW(B) .                                                { A = new SmartTpl::RawStatement(B); }
statement(A)        ::= EXPRESSION outexpr(B) .                                 { A = new SmartTpl::VarStatement(B); }
ifStatement(A)      ::= IF boolexpr(B) statements(C) elseStatement(D) .         { A = new SmartTpl::IfStatement(B,C,D); }
ifStatement(A)      ::= IF boolexpr(B) statements(C) ENDIF .                    { A = new SmartTpl::IfStatement(B, C); }
elseStatement(A)    ::= ELSE statements(B) ENDIF .                              { A = B; }
elseStatement(A)    ::= ELSEIF boolexpr(B) statements(C) elseStatement(D) .     { A = new SmartTpl::Statements(new SmartTpl::IfStatement(B,C,D)); }
elseStatement(A)    ::= ELSEIF boolexpr(B) statements(C) ENDIF .                { A = new SmartTpl::Statements(new SmartTpl::IfStatement(B, C)); }
statement(A)        ::= foreachStatement(B) .                                   { A = B; }
foreachStatement(A) ::= FOREACH VARIABLE(B) IN variable(C) statements(D) ENDFOREACH . { A = new SmartTpl::ForEachStatement(B, C, D); }
foreachStatement(A) ::= FOREACH variable(B) AS VARIABLE(C) statements(D) ENDFOREACH . { A = new SmartTpl::ForEachStatement(C, B, D); }
foreachStatement(A) ::= FOREACH variable(B) AS VARIABLE(C) ASSIGN_FOREACH VARIABLE(D) statements(E) ENDFOREACH . { A= new SmartTpl::ForEachStatement(D, B, C, E); }
statement(A)        ::= assignStatement(B) .                                    { A = B; }
assignStatement(A)  ::= ASSIGN expr(B) TO variable(C) .                         { A = new SmartTpl::AssignStatement(B, C); }
boolexpr(A)         ::= outexpr(B) .                                            { A = B; }
boolexpr(A)         ::= outexpr(B) EQ outexpr(C) .                              { A = new SmartTpl::BinaryEqualsOperator(B, C); }
boolexpr(A)         ::= outexpr(B) NE outexpr(C) .                              { A = new SmartTpl::BinaryNotEqualsOperator(B, C); }
boolexpr(A)         ::= outexpr(B) GT outexpr(C) .                              { A = new SmartTpl::BinaryGreaterOperator(B, C); }
boolexpr(A)         ::= outexpr(B) GE outexpr(C) .                              { A = new SmartTpl::BinaryGreaterEqualsOperator(B, C); }
boolexpr(A)         ::= outexpr(B) LT outexpr(C) .                              { A = new SmartTpl::BinaryLesserOperator(B, C); }
boolexpr(A)         ::= outexpr(B) LE outexpr(C) .                              { A = new SmartTpl::BinaryLesserEqualsOperator(B, C); }
boolexpr(A)         ::= boolexpr(B) AND boolexpr(C) .                           { A = new SmartTpl::BinaryAndOperator(B, C); }
boolexpr(A)         ::= boolexpr(B) OR boolexpr(C) .                            { A = new SmartTpl::BinaryOrOperator(B, C); }
outexpr(A)          ::= expr(B) .                                               { A = B; }
outexpr(A)          ::= expr(B) PIPE modifiers(C) .                             { A = new SmartTpl::Filter(B, C); }
expr(A)             ::= variable(B) .                                           { A = B; }
expr(A)             ::= literal(B) .                                            { A = B; }
expr(A)             ::= LPAREN expr(B) RPAREN .                                 { A = B; }
expr(A)             ::= expr(B) PLUS expr(C) .                                  { A = new SmartTpl::BinaryPlusOperator(B, C); }
expr(A)             ::= expr(B) MINUS expr(C) .                                 { A = new SmartTpl::BinaryMinusOperator(B, C); }
expr(A)             ::= expr(B) MULTIPLY expr(C) .                              { A = new SmartTpl::BinaryMultiplyOperator(B, C); }
expr(A)             ::= expr(B) DIVIDE expr(C) .                                { A = new SmartTpl::BinaryDivideOperator(B, C); }
literal(A)          ::= TRUE .                                                  { A = new SmartTpl::LiteralBoolean(true); }
literal(A)          ::= FALSE .                                                 { A = new SmartTpl::LiteralBoolean(false); }
literal(A)          ::= INTEGER(B) .                                            { A = new SmartTpl::LiteralInteger(B); }
literal(A)          ::= STRING(B) .                                             { A = new SmartTpl::LiteralString(B); }
variable(A)         ::= VARIABLE(B) .                                           { A = new SmartTpl::LiteralVariable(B); }
variable(A)         ::= variable(B) LBRACK expr(C) RBRACK .                     { A = new SmartTpl::VariableArrayAccess(B,C); }
variable(A)         ::= variable(B) DOT IDENTIFIER(C) .                         { A = new SmartTpl::LiteralArrayAccess(B,C); }
modifiers(A)        ::= modifiers(B) PIPE modifier(C) .                         { A = B; A->add(C); }
modifiers(A)        ::= modifier(B) .                                           { A = new SmartTpl::Modifiers(B); }
modifier(A)         ::= IDENTIFIER(B) COLON parameters(C) .                     { A = new SmartTpl::ModifierExpression(B, C); }
modifier(A)         ::= IDENTIFIER(B) .                                         { A = new SmartTpl::ModifierExpression(B); }
parameters(A)       ::= parameters(B) COLON expr(C) .                           { A = B; A->add(C); }
parameters(A)       ::= expr(B) .                                               { A = new SmartTpl::Parameters(B); }