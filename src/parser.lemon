%extra_argument { SmartTpl::Internal::TokenProcessor *parent }
%token_type { SmartTpl::Internal::Token* }
%token_prefix TOKEN_
%name SmartTplParse

%type   statement        {SmartTpl::Internal::Statement*}
%type   statements       {SmartTpl::Internal::Statements*}
%type   ifStatement      {SmartTpl::Internal::IfStatement*}
%type   elseStatement    {SmartTpl::Internal::Statements*}
%type   foreachStatement {SmartTpl::Internal::ForEachStatement*}
%type   assignStatement  {SmartTpl::Internal::AssignStatement*}
%type   expr             {SmartTpl::Internal::Expression*}
%type   literal          {SmartTpl::Internal::Literal*}
%type   variable         {SmartTpl::Internal::Variable*}
%type   filter           {SmartTpl::Internal::Filter*}
%type   parameters       {SmartTpl::Internal::Parameters*}
%type   modifiers        {SmartTpl::Internal::Modifiers*}
%type   modifier         {SmartTpl::Internal::ModifierExpression*}

%default_destructor { (void) parent; if ($$) delete $$; }
%token_destructor { if ($$) delete $$; }

%left OR.
%left AND.
%right NOT.
%left EQ NE REGEX.
%left LT LE GT GE.
%left INTEGER DOUBLE.
%left PLUS MINUS.
%left MULTIPLY DIVIDE MOD.
%right EXP.
%right UMINUS.
%left COLON.
%left PIPE.
%left DOT LBRACK RBRACK.

%stack_size 1000

%include
{
    #include "includes.h"
    #include <iostream>
    #include <assert.h>
}

%parse_failure
{
    parent->parseFailure();
}

%syntax_error
{
    // Build up a vector of expected tokens
    // Mostly based on the following SO post, but we instead put it in a std::vector
    // https://stackoverflow.com/questions/11705737/expected-token-using-lemon-parser-generator/13010096#13010096
    std::vector<std::string> expectedTokens;

    // we loop over all known tokens, if we exceed our defined tokens we exit
    // our last defined token is TOKEN_STRING, so we halt when we go past it
    for (int i = 0; i <= TOKEN_STRING; ++i) {
        int a = yy_find_shift_action(yypParser, (YYCODETYPE)i);
        if (a < YYNSTATE + YYNRULE) expectedTokens.emplace_back(yyTokenName[i]);
    }
    parent->syntaxError(expectedTokens);
}

%stack_overflow
{
    parent->stackOverflow();
}

start               ::= MODE IDENTIFIER(A) END_BRACES statements(B) .           { parent->mode(A); parent->add(B); }
start               ::= ESCAPE statements(A) .                                  { parent->mode(new SmartTpl::Internal::Token("html")); parent->add(A); }
start               ::= statements(A) .                                         { parent->add(A); }
statements(A)       ::= statements(B) statement(C) .                            { A = B; A->add(C); }
statements(A)       ::= statement(B) .                                          { A = new SmartTpl::Internal::Statements(B); }
statement(A)        ::= ifStatement(B) .                                        { A = B; }
statement(A)        ::= RAW(B) .                                                { A = new SmartTpl::Internal::RawStatement(B); }
statement(A)        ::= EXPRESSION expr(B) END_BRACES .                         { A = new SmartTpl::Internal::ExpressionStatement(B); }
ifStatement(A)      ::= IF expr(B) END_BRACES statements(C) elseStatement(D) .  { A = new SmartTpl::Internal::IfStatement(B,C,D); }
ifStatement(A)      ::= IF expr(B) END_BRACES statements(C) ENDIF .             { A = new SmartTpl::Internal::IfStatement(B, C); }
elseStatement(A)    ::= ELSE statements(B) ENDIF .                              { A = B; }
elseStatement(A)    ::= ELSEIF expr(B) END_BRACES statements(C) elseStatement(D) . { A = new SmartTpl::Internal::Statements(new SmartTpl::Internal::IfStatement(B,C,D)); }
elseStatement(A)    ::= ELSEIF expr(B) END_BRACES statements(C) ENDIF .         { A = new SmartTpl::Internal::Statements(new SmartTpl::Internal::IfStatement(B, C)); }
statement(A)        ::= foreachStatement(B) .                                   { A = B; }
foreachStatement(A) ::= FOREACH VARIABLE(B) IN variable(C) END_BRACES statements(D) ENDFOREACH . { A = new SmartTpl::Internal::ForEachStatement(C, B, D); }
foreachStatement(A) ::= FOREACH variable(B) AS VARIABLE(C) END_BRACES statements(D) ENDFOREACH . { A = new SmartTpl::Internal::ForEachStatement(B, C, D); }
foreachStatement(A) ::= FOREACH variable(B) AS VARIABLE(C) ASSIGN_FOREACH VARIABLE(D) END_BRACES statements(E) ENDFOREACH . { A = new SmartTpl::Internal::ForEachStatement(B, C, D, E); }
foreachStatement(A) ::= FOREACH VARIABLE(B) IN variable(C) END_BRACES statements(D) FOREACH_ELSE statements(E) ENDFOREACH . { A = new SmartTpl::Internal::ForEachStatement(C, B, D, E); }
foreachStatement(A) ::= FOREACH variable(B) AS VARIABLE(C) END_BRACES statements(D) FOREACH_ELSE statements(E) ENDFOREACH . { A = new SmartTpl::Internal::ForEachStatement(B, C, D, E); }
foreachStatement(A) ::= FOREACH variable(B) AS VARIABLE(C) ASSIGN_FOREACH VARIABLE(D) END_BRACES statements(E) FOREACH_ELSE statements(F) ENDFOREACH . { A = new SmartTpl::Internal::ForEachStatement(B, C, D, E, F); }
statement(A)        ::= assignStatement(B) .                                    { A = B; }
assignStatement(A)  ::= ASSIGN expr(B) TO VARIABLE(C) END_BRACES .              { A = new SmartTpl::Internal::AssignStatement(B, C); }
assignStatement(A)  ::= EXPRESSION VARIABLE(B) IS expr(C) END_BRACES .          { A = new SmartTpl::Internal::AssignStatement(C, B); }
expr(A)             ::= expr(B) REGEX expr(C) .                                 { A = new SmartTpl::Internal::BinaryRegexOperator(B, C); }
expr(A)             ::= expr(B) EQ expr(C) .                                    { A = new SmartTpl::Internal::BinaryEqualsOperator(B, C); }
expr(A)             ::= expr(B) NE expr(C) .                                    { A = new SmartTpl::Internal::BinaryNotEqualsOperator(B, C); }
expr(A)             ::= expr(B) GT expr(C) .                                    { A = new SmartTpl::Internal::BinaryGreaterOperator(B, C); }
expr(A)             ::= expr(B) GE expr(C) .                                    { A = new SmartTpl::Internal::BinaryGreaterEqualsOperator(B, C); }
expr(A)             ::= expr(B) LT expr(C) .                                    { A = new SmartTpl::Internal::BinaryLesserOperator(B, C); }
expr(A)             ::= expr(B) LE expr(C) .                                    { A = new SmartTpl::Internal::BinaryLesserEqualsOperator(B, C); }
expr(A)             ::= NOT expr(B) .                                           { A = new SmartTpl::Internal::BooleanInverter(B); }
expr(A)             ::= expr(B) AND expr(C) .                                   { A = new SmartTpl::Internal::BinaryAndOperator(B, C); }
expr(A)             ::= expr(B) OR expr(C) .                                    { A = new SmartTpl::Internal::BinaryOrOperator(B, C); }
expr(A)             ::= LPAREN expr(B) RPAREN .                                 { A = B; }
expr(A)             ::= variable(B) .                                           { A = B; }
expr(A)             ::= expr(B) PLUS expr(C) .                                  { A = new SmartTpl::Internal::BinaryPlusOperator(B, C); }
expr(A)             ::= expr(B) MINUS expr(C) .                                 { A = new SmartTpl::Internal::BinaryMinusOperator(B, C); }
expr(A)             ::= expr(B) MULTIPLY expr(C) .                              { A = new SmartTpl::Internal::BinaryMultiplyOperator(B, C); }
expr(A)             ::= expr(B) DIVIDE expr(C) .                                { A = new SmartTpl::Internal::BinaryDivideOperator(B, C); }
expr(A)             ::= expr(B) MOD expr(C) .                                   { A = new SmartTpl::Internal::BinaryModuloOperator(B, C); }
expr(A)             ::= literal(B) .                                            { A = B; }
literal(A)          ::= TRUE .                                                  { A = new SmartTpl::Internal::LiteralBoolean(true); }
literal(A)          ::= FALSE .                                                 { A = new SmartTpl::Internal::LiteralBoolean(false); }
literal(A)          ::= INTEGER(B) .                                            { A = new SmartTpl::Internal::LiteralNumeric(B); }
literal(A)          ::= MINUS INTEGER(B) . [UMINUS]                             { B->insert(0, 1, '-'); A = new SmartTpl::Internal::LiteralNumeric(B); }
literal(A)          ::= DOUBLE(B) .                                             { A = new SmartTpl::Internal::LiteralDouble(B); }
literal(A)          ::= MINUS DOUBLE(B) . [UMINUS]                              { B->insert(0, 1, '-'); A = new SmartTpl::Internal::LiteralDouble(B); }
literal(A)          ::= STRING(B) .                                             { A = new SmartTpl::Internal::LiteralString(B); }
variable(A)         ::= VARIABLE(B) .                                           { parent->setPersonalized(); A = new SmartTpl::Internal::LiteralVariable(B); }
variable(A)         ::= variable(B) LBRACK expr(C) RBRACK .                     { parent->setPersonalized(); A = new SmartTpl::Internal::VariableArrayAccess(B,C); }
variable(A)         ::= variable(B) DOT IDENTIFIER(C) .                         { parent->setPersonalized(); A = new SmartTpl::Internal::LiteralArrayAccess(B,C); }
variable(A)         ::= variable(B) PIPE modifiers(C) .                         { A = new SmartTpl::Internal::Filter(B, C); }
modifiers(A)        ::= modifiers(B) PIPE modifier(C) .                         { A = B; A->add(C); }
modifiers(A)        ::= modifier(B) .                                           { A = new SmartTpl::Internal::Modifiers(B); }
modifier(A)         ::= IDENTIFIER(B) COLON parameters(C) .                     { A = new SmartTpl::Internal::ModifierExpression(B, C); }
modifier(A)         ::= IDENTIFIER(B) .                                         { A = new SmartTpl::Internal::ModifierExpression(B); }
parameters(A)       ::= parameters(B) COLON literal(C) .                        { A = B; A->add(C); }
parameters(A)       ::= literal(B) .                                            { A = new SmartTpl::Internal::Parameters(B); }
